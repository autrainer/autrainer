[tool.poetry]
name = "autrainer"
version = "0.5.0"
description = "A Modular and Extensible Deep Learning Toolkit for Computer Audition Tasks."
authors = [
    "Simon Rampp <simon.rampp@tum.de>",
    "Andreas Triantafyllopoulos <andreas.triantafyllopoulos@tum.de>",
    "Manuel Milling <manuel.milling@tum.de>",
    "Bj√∂rn W. Schuller <schuller@tum.de>",
]
readme = "README.md"
license = "MIT"
keywords = [
    "computer audition",
    "deep learning",
    "artificial intelligence",
    "pytorch",
    "hydra-core",
    "command-line",
    "yaml",
]
include = [{ path = "autrainer-configurations", format = ["sdist", "wheel"] }]

classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
repository = "https://github.com/autrainer/autrainer"
documentation = "https://autrainer.github.io/autrainer/"

[tool.poetry.dependencies]
python = "^3.9"
albumentations = { version = "^1.4.10", optional = true }
audiofile = "^1.3.0"
audiomentations = { version = "^0.37.0", optional = true, python = ">=3.9,<=3.12" }
audmetric = "^1.2.0"
audobject = "^0.7.11"
audtorch = "^0.6.4"
checksumdir = "^1.2.0"
hydra-core = "^1.3.2"
hydra-filter-sweeper = "^1.1.0"
latex = { version = "^0.7.0", optional = true }
matplotlib = "^3.7.1"
mlflow = { version = "^2.7.1", optional = true }
numpy = "^1.24.1"
omegaconf = "^2.3.0"
opensmile = { version = "^2.5.0", optional = true }
pandas = "^2.1.1"
Pillow = "^9.3.0"
psutil = "^5.0.0"
PyYAML = "^6.0.1"
Requests = "^2.31.0"
scikit-learn = "^1.3.1"
seaborn = "^0.13.0"
speechbrain = "^1.0.0"
tensorboard = { version = "^2.16.2", optional = true }
timm = "^1.0.3"
torch = "*"
torch-audiomentations = { version = "^0.11.1", optional = true }
torchaudio = "*"
torchinfo = "^1.8.0"
torchlibrosa = "^0.1.0"
torchvision = "*"
tqdm = "^4.66.1"
transformers = "^4.34.0"

[tool.poetry.extras]
albumentations = ["albumentations"]
audiomentations = ["audiomentations"]
latex = ["latex"]
mlflow = ["mlflow"]
opensmile = ["opensmile"]
tensorboard = ["tensorboard"]
torch-audiomentations = ["torch-audiomentations"]
all = [
    "albumentations",
    "audiomentations",
    "latex",
    "mlflow",
    "opensmile",
    "tensorboard",
    "torch-audiomentations",
]

[tool.poetry.group.dev.dependencies]
codespell = "^2.2.6"
pre-commit = "^3.7.0"
pytest = "^8.1.1"
pytest-cov = "^5.0.0"
ruff = "^0.4.2"

[tool.poetry.group.docs.dependencies]
catppuccin = { extras = ["pygments"], version = "^2.3.0" }
pydata-sphinx-theme = "^0.15.3"
sphinx = "^7.3.7"
sphinx-argparse = "^0.4.0"
sphinx-autodoc-typehints = "^2.2.0"
sphinx-copybutton = "^0.5.2"
sphinx-design = "^0.6.0"
sphinxcontrib-jquery = "^4.1"
toml = "^0.10.2"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
autrainer = "autrainer.core.scripts.cli:main"

[tool.ruff]
line-length = 79
target-version = "py39"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F", "E9", "F63", "F7", "F82", "Q0", "N801", "I"]
ignore = ["E741"]

[tool.ruff.lint.isort]
force-sort-within-sections = true
lines-after-imports = 2

[tool.codespell]
skip = "*.ipynb,poetry.lock"

[tool.pytest.ini_options]
addopts = "--cov=autrainer --cov-report=term-missing"
testpaths = "tests"

[tool.coverage.report]
omit = ["config.py", "config-3.py"]
